#!/bin/bash
 
# Automatic Dependencies Solving Makefile Generating Configure Script
# Written by eXerigumo Clanjor
 
# CUSTOMIZE
MAIN="sources/main"

# 需要安装opengl库freeglut3-dev
# LIBS="-lglut -lGL -lGLU"
 
# GLOBAL VARS
CXXFLAGS="-s"
CXXOPTIMIZE="-O2"
DEPS=()
OBJS=()
 
# -- void main(argv)
main()
{
    # parse arguments
    while ! [ -z "$1" ]; do
        case $1 in
            "--help" | "-h")    show_help
                                ;;
            "--enable-debug")   CXXFLAGS="-g -DDEBUG"
                                CXXOPTIMIZE=""  # No optimization
                                shift ;;
            "-Ofast")   CXXOPTIMIZE="-Ofast"
                        shift ;;
            "--clean")  make cleanall
                        rm -f makefile
                        exit 0
                        ;;
            *)  error "unknown argument: $1"
                ;;
        esac
    done
 
    generate_makefile
}
 
# -- void generate_makefile(void)
generate_makefile()
{
    echo -e "# Generated by ADSMGCS." > makefile
    echo >> makefile
    echo -e "CXXFLAGS = -Wall $CXXFLAGS $CXXOPTIMIZE $LIBS" >> makefile
    echo >> makefile
 
    echo -e "all: $MAIN" >> makefile
    echo -e "clean:" >> makefile
    echo -e "\trm -f *.o" >> makefile
    echo -e "cleanall: clean" >> makefile
    echo -e "\trm -f $MAIN" >> makefile
    echo -e "rebuild: clean all" >> makefile
    echo -e "debug: all" >> makefile
    echo -e "\t./$MAIN" >> makefile
    echo >> makefile
 
    generate_dep "${MAIN}.cpp"
 
    echo -e "$MAIN:" ${OBJS[*]} >> makefile
    echo -e '\t$(CXX) $(CXXFLAGS) -o $@ $^' >> makefile
    cat .makefile >> makefile
    echo >> makefile
    rm -f .makefile
}
 
# -- void show_help(void)
show_help()
{
    echo
    echo -e "OPTIONS:"
    echo -e "\t--help, -h"
    echo -e "\t\tShow this help"
    echo -e "\t--enable-debug"
    echo -e "\t\tEnable debug mode"
    echo -e "\t-Ofast"
    echo -e "\t\tUse -Ofast instead of -O2"
    echo
 
    exit 0
}
 
# -- void error(string err)
error()
{
    echo -e "\e[1;31merror:\e[m $1"
    exit 1
}
 
# -- void generate_dep(string file)
generate_dep()
{
    echo -e "Solving dependencies of $1..."
 
    if ! g++ -MM "$1" > .dep; then
        error "unexpected failure of g++."
    fi
    cat .dep >> .makefile
    echo -e '\t$(CXX) $(CXXFLAGS) -c -o $@ $<' >> .makefile
 
    local dep="`cat .dep|awk '{sub(/\\\\/, ""); printf $0}' \
            |sed 's/[^ ]\+: [^ ]\+ \?//g'`"
    local obj="`cat .dep|head -n 1|awk -F: '{printf $1}'`"
    rm -f .dep
 
    OBJS[${#OBJS[*]}]="$obj"
     
    local d
    for d in $dep; do
        if need_recursive_dep "$d"; then
            [[ "$d" =~ (.*)\.h$ ]] && d="${BASH_REMATCH[1]}.cpp"
            [ -f "$d" ] && generate_dep "$d"
        fi
    done
}
 
# -- bool need_recursive_dep(string file)
need_recursive_dep()
{
    local d
    for d in ${DEPS[*]}; do
        [[ "$d" == "$1" ]] && return 1
    done
 
    DEPS[${#DEPS[*]}]="$1"
    return 0
}
 
main $*
